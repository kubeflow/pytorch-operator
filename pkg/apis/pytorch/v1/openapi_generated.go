// +build !ignore_autogenerated

// Copyright 2019 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by main. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/kubeflow/common/job_controller/api/v1.JobCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "JobCondition describes the state of the job at a certain point.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of job condition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the condition, one of True, False, Unknown.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "The reason for the condition's last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human readable message indicating details about the transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lastUpdateTime": {
							SchemaProps: spec.SchemaProps{
								Description: "The last time this condition was updated.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastTransitionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Last time the condition transitioned from one status to another.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
					},
					Required: []string{"type", "status"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubeflow/common/job_controller/api/v1.JobStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "JobStatus represents the current observed state of the training Job.",
					Properties: map[string]spec.Schema{
						"conditions": {
							SchemaProps: spec.SchemaProps{
								Description: "Conditions is an array of current observed job conditions.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/common/job_controller/api/v1.JobCondition"),
										},
									},
								},
							},
						},
						"replicaStatuses": {
							SchemaProps: spec.SchemaProps{
								Description: "ReplicaStatuses is map of ReplicaType and ReplicaStatus, specifies the status of each replica.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/common/job_controller/api/v1.ReplicaStatus"),
										},
									},
								},
							},
						},
						"startTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"completionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastReconcileTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents last time when the job was reconciled. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
					},
					Required: []string{"conditions", "replicaStatuses"},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/common/job_controller/api/v1.JobCondition", "github.com/kubeflow/common/job_controller/api/v1.ReplicaStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubeflow/common/job_controller/api/v1.ReplicaSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ReplicaSpec is a description of the replica",
					Properties: map[string]spec.Schema{
						"replicas": {
							SchemaProps: spec.SchemaProps{
								Description: "Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"template": {
							SchemaProps: spec.SchemaProps{
								Description: "Template is the object that describes the pod that will be created for this replica. RestartPolicy in PodTemplateSpec will be overide by RestartPolicy in ReplicaSpec",
								Ref:         ref("k8s.io/api/core/v1.PodTemplateSpec"),
							},
						},
						"restartPolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "Restart policy for all replicas within the job. One of Always, OnFailure, Never and ExitCode. Default to Never.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PodTemplateSpec"},
		},
		"github.com/kubeflow/common/job_controller/api/v1.ReplicaStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ReplicaStatus represents the current observed state of the replica.",
					Properties: map[string]spec.Schema{
						"active": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of actively running pods.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"succeeded": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of pods which reached phase Succeeded.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"failed": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of pods which reached phase Failed.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubeflow/pytorch-operator/pkg/apis/pytorch/v1.PyTorchJob": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents a PyTorchJob resource.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard Kubernetes object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the desired state of the PyTorchJob.",
								Ref:         ref("github.com/kubeflow/pytorch-operator/pkg/apis/pytorch/v1.PyTorchJobSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Most recently observed status of the PyTorchJob. Read-only (modified by the system).",
								Ref:         ref("github.com/kubeflow/common/job_controller/api/v1.JobStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/common/job_controller/api/v1.JobStatus", "github.com/kubeflow/pytorch-operator/pkg/apis/pytorch/v1.PyTorchJobSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubeflow/pytorch-operator/pkg/apis/pytorch/v1.PyTorchJobList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PyTorchJobList is a list of PyTorchJobs.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of PyTorchJobs.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/pytorch-operator/pkg/apis/pytorch/v1.PyTorchJob"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/pytorch-operator/pkg/apis/pytorch/v1.PyTorchJob", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubeflow/pytorch-operator/pkg/apis/pytorch/v1.PyTorchJobSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PyTorchJobSpec is a desired state description of the PyTorchJob.",
					Properties: map[string]spec.Schema{
						"activeDeadlineSeconds": {
							SchemaProps: spec.SchemaProps{
								Description: "Specifies the duration (in seconds) since startTime during which the job can remain active before it is terminated. Must be a positive integer. This setting applies only to pods where restartPolicy is OnFailure or Always.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
						"backoffLimit": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of retries before marking this job as failed.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"cleanPodPolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "Defines the policy for cleaning up pods after the PyTorchJob completes. Defaults to None.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"ttlSecondsAfterFinished": {
							SchemaProps: spec.SchemaProps{
								Description: "Defines the TTL for cleaning up finished PyTorchJobs (temporary before Kubernetes adds the cleanup controller). It may take extra ReconcilePeriod seconds for the cleanup, since reconcile gets called periodically. Defaults to infinite.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"pytorchReplicaSpecs": {
							SchemaProps: spec.SchemaProps{
								Description: "A map of PyTorchReplicaType (type) to ReplicaSpec (value). Specifies the PyTorch cluster configuration. For example,\n  {\n    \"Master\": PyTorchReplicaSpec,\n    \"Worker\": PyTorchReplicaSpec,\n  }",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/common/job_controller/api/v1.ReplicaSpec"),
										},
									},
								},
							},
						},
					},
					Required: []string{"pytorchReplicaSpecs"},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/common/job_controller/api/v1.ReplicaSpec"},
		},
	}
}
